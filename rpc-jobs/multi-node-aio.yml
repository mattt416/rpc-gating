- project:
    name: 'Multi-Node-AIO-Jobs'
    series:
      - mitaka:
          branch: mitaka-13.1
          OPENSTACK_ANSIBLE_BRANCH: "stable/mitaka"
      - newton:
          branch: newton-14.0
          OPENSTACK_ANSIBLE_BRANCH: "stable/newton"
      - master:
          branch: master
          OPENSTACK_ANSIBLE_BRANCH: "stable/newton"
    context:
      - xenial:
          DEFAULT_IMAGE: "16.04.2"
      - trusty:
          DEFAULT_IMAGE: "14.04.5"
    exclude:
      - series: mitaka
        context: xenial
    jobs:
      - 'OnMetal_Multi_Node_AIO_{series}-{context}'

- job-template:
    name: 'OnMetal_Multi_Node_AIO_{series}-{context}'
    project-type: workflow
    properties:
      - build-discarder:
          days-to-keep: 7
    concurrent: true
    triggers:
      - timed: "H H(0-8) * * 1-5"
    parameters:
      - rpc_gating_params
      - string:
          name: "RPC_REPO"
          default: "https://github.com/rcbops/rpc-openstack"
      - string:
          name: "RPC_BRANCH"
          default: "{branch}"
      - tempest_params:
         TEMPEST_TEST_SETS: "scenario defcore api"
         RUN_TEMPEST_OPTS: ""
         TESTR_OPTS: "--concurrency 3"
      - single_use_slave_params:
         IMAGE: "OnMetal - Ubuntu 14.04 LTS (Trusty Tahr)"
         FLAVOR: "onmetal-io1"
         REGION: "IAD"
      - string:
          name: OSA_OPS_REPO
          default: https://github.com/openstack/openstack-ansible-ops
      - string:
          name: OSA_OPS_BRANCH
          default: master
      - string:
          name: OPENSTACK_ANSIBLE_BRANCH
          default: "{OPENSTACK_ANSIBLE_BRANCH}"
          description: Openstack Ansible branch to use in setup
      - string:
          name: DEFAULT_IMAGE
          default: "{DEFAULT_IMAGE}"
          description: Version of Ubuntu image to use for VMs (14.04.5 or 16.04.2)
      - string:
          name: DEFAULT_KERNEL
          default: "4.4.0-66"
          description: Ubuntu Kernal Version to use for VMs (4.4.0-66, 3.13.0-34, etc.)
      - bool:
          name: PARTITION_HOST
          default: true
          description: Enable partitioning of host data disk device
      - string:
          name: STAGES
          default: |
            Allocate Resources, Connect Slave, Prepare Multi-Node AIO,
             Prepare RPC Configs, Deploy RPC w/ Script, Prepare MaaS,
             Setup MaaS, Verify MaaS, Install Tempest, Tempest Tests,
             Prepare Horizon Selenium, Horizon Tests, Prepare Kibana Selenium,
             Kibana Tests, Holland, Cleanup
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Multi-Node AIO
              Prepare RPC Configs
              Deploy RPC w/ Script
              Prepare MaaS
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Prepare Horizon Selenium
              Horizon Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland
              Pause (use to hold instance for investigation before cleanup)
              Cleanup

    dsl: |
      node(){{
        try {{
          dir("rpc-gating"){{
            git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
            pubCloudSlave = load 'pipeline-steps/pubcloud.groovy'
            common = load 'pipeline-steps/common.groovy'
            multi_node_aio_prepare = load 'pipeline-steps/multi_node_aio_prepare.groovy'
            deploy = load 'pipeline-steps/deploy.groovy'
            maas = load 'pipeline-steps/maas.groovy'
            tempest = load 'pipeline-steps/tempest.groovy'
            horizon = load 'pipeline-steps/horizon.groovy'
            kibana = load 'pipeline-steps/kibana.groovy'
            holland = load 'pipeline-steps/holland.groovy'
          }}
          instance_name = common.gen_instance_name()
          pubCloudSlave.getPubCloudSlave(instance_name: instance_name)

          node(instance_name){{
            multi_node_aio_prepare.prepare()
            deploy.deploy_sh(
              environment_vars: [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_ELK=yes",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_AIO=no",
                "DEPLOY_MAAS=no"
                ]
            ) // deploy_sh
            parallel(
              "maas": {{
                node(){{
                  dir("rpc-gating"){{
                    git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
                  }}
                  maas.prepare(instance_name: instance_name)
                }}
                maas.deploy()
                maas.verify()
              }},
              "tempest": {{
                tempest.tempest(vm: "infra1", branch: RPC_BRANCH)
              }},
              "horizon": {{
                horizon.horizon_integration()
              }},
              "kibana": {{
                kibana.kibana()
              }},
              "holland": {{
                holland.holland()
              }}
            ) // parallel
          }}// public cloud node
        }} catch (e){{
            currentBuild.result = 'FAILURE'
            throw e
        }} finally {{
            pubCloudSlave.delPubCloudSlave(instance_name: instance_name)
        }}
      }} // cit node
